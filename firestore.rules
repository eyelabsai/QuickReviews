rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Users: owner can read and update limited fields on their own profile
    match /users/{userId} {
      allow read: if isSignedIn() && resource.data.email == request.auth.token.email;

      // Allow owner to create their profile doc at their UID with limited fields
      allow create: if isSignedIn()
        && userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['email', 'fullName', 'reviewLink', 'needsPasswordChange', 'practiceName', 'logoUrl', 'senderName', 'emailSubject', 'defaultMessage', 'username', 'usernameLower'])
        && request.resource.data.email == request.auth.token.email;

      // Allow owner to update limited fields; email must stay the same
      // Also allow updates to documents where the email matches (for legacy username-based docs)
      allow update: if isSignedIn()
        && resource.data.email == request.auth.token.email
        && request.resource.data.keys().hasOnly(['email', 'fullName', 'reviewLink', 'needsPasswordChange', 'practiceName', 'logoUrl', 'senderName', 'emailSubject', 'defaultMessage', 'username', 'usernameLower'])
        && request.resource.data.email == resource.data.email;

      allow delete: if false;
    }

    // Public username → uid/email mapping for sign-in by username
    // Doc ID is the lowercase username; fields contain only uid/email/createdAt
    match /usernames/{uname} {
      // Public read so login form can resolve username → email without auth
      allow read: if true;

      // Only the signed-in owner can claim a username, once. No updates/deletes.
      allow create: if isSignedIn()
        && request.resource.id.matches('^[a-z0-9._-]{3,30}$')
        && request.resource.data.keys().hasOnly(['uid', 'email', 'createdAt'])
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.email == request.auth.token.email;
      // Allow owner to delete their own mapping to change username
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow update: if false;
    }

    // Outbound SMS queue: allow authenticated creates with basic validation
    match /messages/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['to', 'body'])
        && request.resource.data.to is string
        && request.resource.data.body is string
        && request.resource.data.to.matches('^\\+1\\d{10}$')
        && request.resource.data.body.size() > 0
        && request.resource.data.body.size() <= 2000;
      allow read, update, delete: if false;
    }

    // Outbound email queue (Firebase Extensions format): allow authenticated creates
    match /mail/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['to', 'from', 'message'])
        && request.resource.data.to is string
        && request.resource.data.from is string
        && (
          request.resource.data.from.matches('^feedback@ezreviews\\.app$') ||
          request.resource.data.from.matches('^[^<>]{1,80} <feedback@ezreviews\\.app>$')
        )
        && request.resource.data.message is map
        && request.resource.data.message.subject is string
        && request.resource.data.message.html is string;
      allow read, update, delete: if false;
    }

    // Delivery log: providers can write and read their own entries
    match /deliveries/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['ownerEmail', 'patientFullName', 'patientPreferredName', 'to', 'channel', 'message', 'createdAt', 'trackingId'])
        && request.resource.data.ownerEmail == request.auth.token.email
        && request.resource.data.channel in ['sms', 'email']
        && request.resource.data.to is string
        && request.resource.data.message is string
        && request.resource.data.createdAt is timestamp;
      allow read: if isSignedIn() && resource.data.ownerEmail == request.auth.token.email;
      allow update, delete: if false;
    }

    // Review tracking: providers can write, read, and update their own tracking records
    match /reviewTracking/{docId} {
      function isClickUpdate() {
        // Allow unauthenticated click tracking updates that only flip clicked fields
        let diff = request.resource.data.diff(resource.data);
        return diff.changedKeys().hasOnly(['clicked','clickedAt','clickCount'])
          && diff.addedKeys().size() == 0
          && diff.removedKeys().size() == 0
          // Ensure ownership and immutable fields are not altered
          && request.resource.data.ownerEmail == resource.data.ownerEmail
          && request.resource.data.channel == resource.data.channel
          && request.resource.data.to == resource.data.to
          && request.resource.data.reviewLink == resource.data.reviewLink
          && request.resource.data.message == resource.data.message
          && request.resource.data.sentAt == resource.data.sentAt
          && request.resource.data.expiresAt == resource.data.expiresAt
          && request.resource.data.resendCount == resource.data.resendCount
          && request.resource.data.lastResentAt == resource.data.lastResentAt
          && request.resource.data.deliveryId == resource.data.deliveryId
          && request.resource.data.finalMessage == resource.data.finalMessage
          && request.resource.data.finalHtml == resource.data.finalHtml
          && request.resource.data.senderName == resource.data.senderName;
      }
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['ownerEmail', 'patientFullName', 'patientPreferredName', 'to', 'channel', 'reviewLink', 'message', 'sentAt', 'expiresAt', 'clicked', 'clickCount', 'resendCount', 'lastResentAt', 'deliveryId', 'finalMessage', 'finalHtml', 'senderName'])
        && request.resource.data.ownerEmail == request.auth.token.email
        && request.resource.data.channel in ['sms', 'email']
        && request.resource.data.to is string
        && request.resource.data.reviewLink is string
        && request.resource.data.message is string
        && request.resource.data.sentAt is timestamp
        && request.resource.data.expiresAt is timestamp
        && request.resource.data.clicked is bool
        && request.resource.data.clickCount is number
        && request.resource.data.resendCount is number;
      
      allow read: if isSignedIn() && resource.data.ownerEmail == request.auth.token.email;
      
      // Allow updates for tracking clicks and resends
      // 1) Authenticated owners may update their own docs
      // 2) Public click tracking page may update only click fields
      allow update: if (
          (isSignedIn() && resource.data.ownerEmail == request.auth.token.email && request.resource.data.ownerEmail == resource.data.ownerEmail)
        ) || isClickUpdate();
      
      allow delete: if false;
    }
  }
}



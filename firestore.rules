rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Users: owner can read and update limited fields on their own profile
    match /users/{userId} {
      allow read: if isSignedIn() && resource.data.email == request.auth.token.email;

      // Allow owner to create their profile doc at their UID with limited fields
      allow create: if isSignedIn()
        && userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['email', 'fullName', 'reviewLink', 'needsPasswordChange', 'practiceName', 'logoUrl'])
        && request.resource.data.email == request.auth.token.email;

      // Allow owner to update limited fields; email must stay the same
      allow update: if isSignedIn()
        && resource.data.email == request.auth.token.email
        && request.resource.data.keys().hasOnly(['email', 'fullName', 'reviewLink', 'needsPasswordChange', 'practiceName', 'logoUrl'])
        && request.resource.data.email == resource.data.email;

      allow delete: if false;
    }

    // Outbound SMS queue: allow authenticated creates with basic validation
    match /messages/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['to', 'body'])
        && request.resource.data.to is string
        && request.resource.data.body is string
        && request.resource.data.to.matches('^\\+1\\d{10}$')
        && request.resource.data.body.size() > 0
        && request.resource.data.body.size() <= 2000;
      allow read, update, delete: if false;
    }

    // Outbound email queue (Firebase Extensions format): allow authenticated creates
    match /mail/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['to', 'from', 'message'])
        && request.resource.data.to is string
        && request.resource.data.from is string
        && request.resource.data.from.matches('^feedback@ezreviews\\.app$')
        && request.resource.data.message is map
        && request.resource.data.message.subject is string
        && request.resource.data.message.html is string;
      allow read, update, delete: if false;
    }

    // Delivery log: providers can write and read their own entries
    match /deliveries/{docId} {
      allow create: if isSignedIn()
        && request.resource.data.keys().hasOnly(['ownerEmail', 'patientFullName', 'patientPreferredName', 'to', 'channel', 'message', 'createdAt'])
        && request.resource.data.ownerEmail == request.auth.token.email
        && request.resource.data.channel in ['sms', 'email']
        && request.resource.data.to is string
        && request.resource.data.message is string
        && request.resource.data.createdAt is timestamp;
      allow read: if isSignedIn() && resource.data.ownerEmail == request.auth.token.email;
      allow update, delete: if false;
    }
  }
}


